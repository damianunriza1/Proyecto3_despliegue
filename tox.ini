# Tox es una herramienta para automatizar el empaquetamiento y prueba de software
# Tox emplea ambientes virtuales, lo que elimina dificultades con las variables de entorno
# en diferentes sistemas operativos y simplifica los pasos de entrenamiento, prueba y publicación del modelo

# recuerde instala tox con 
# pip install tox
# y verifique que usa la versión 4 

[tox]
min_version = 4
envlist = test_package, checks, train, run
skipsdist = True

[testenv]
basepython = python
install_command = pip install {opts} {packages}
allowlist_externals = train

setenv =
    PYTHONPATH=.
    PYTHONHASHSEED=0

[testenv:test_package]
envdir = {toxworkdir}/test_package
deps =
    -r{toxinidir}/requirements/test_requirements.txt
commands=
    python model/train_pipeline.py {posargs:random_forest}
    pytest \
    -s \
    -vv \
    {posargs:tests/}

[testenv:train]
envdir = {toxworkdir}/test_package
deps =
     {[testenv:test_package]deps}
commands=
    python model/train_pipeline.py {posargs:random_forest}

[testenv:checks]
envdir = {toxworkdir}/checks
deps =
    -r{toxinidir}/requirements/typing_requirements.txt
commands =
    flake8 model tests
    isort model tests
    {posargs:mypy model}

[testenv:dep]
description = install development dependencies
commands =
    pip install -r {toxinidir}/requirements/requirements.txt
    pip freeze  # Muestra las dependencias instaladas

[testenv:run]
envdir = {toxworkdir}/test_package
deps =
    {[testenv:test_package]deps}
commands=
    python app/main.py


[flake8]
exclude = .git,env
max-line-length = 100